//SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import 'base64-sol/base64.sol';
import './HexStrings.sol';
import './ToColor.sol';
//learn more: https://docs.openzeppelin.com/contracts/3.x/erc721

// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two

contract Mustache is ERC721Enumerable {

  using Strings for uint256;
  using HexStrings for uint160;
  using ToColor for bytes3;
  using Counters for Counters.Counter;
  Counters.Counter private _tokenIds;

  address payable public constant recipient =
    payable(0x8faC8383Bb69A8Ca43461AB99aE26834fd6D8DeC);

  uint256 public constant limit = 1000;
  uint256 public constant curve = 1005; // price increase 0,5% with each purchase
  uint256 public price = 0.002 ether;

  mapping (uint256 => bytes3) public color;
  mapping (uint256 => bool) public crazy;

  constructor() ERC721("Loogie Bow", "LOOGBOW") {
    // RELEASE THE LOOGIE BOW!
  }

  function mintItem() public payable returns (uint256) {
      require(_tokenIds.current() < limit, "DONE MINTING");
      require(msg.value >= price, "NOT ENOUGH");

      price = (price * curve) / 1000;

      _tokenIds.increment();

      uint256 id = _tokenIds.current();
      _mint(msg.sender, id);

      bytes32 genes = keccak256(abi.encodePacked( id, blockhash(block.number-1), msg.sender, address(this) ));
      color[id] = bytes2(genes[0]) | ( bytes2(genes[1]) >> 8 ) | ( bytes3(genes[2]) >> 16 );
      crazy[id] = uint8(genes[3]) > 200;

      (bool success, ) = recipient.call{value: msg.value}("");
      require(success, "could not send");

      return id;
  }

  function tokenURI(uint256 id) public view override returns (string memory) {
      require(_exists(id), "not exist");
      string memory name = string(abi.encodePacked('Loogie Bow #',id.toString()));
      string memory crazyText = '';
      string memory crazyValue = 'false';
      if (crazy[id]) {
        crazyText = ' and it is crazy';
        crazyValue = 'true';
      }
      string memory description = string(abi.encodePacked('This Loogie Bow is the color #',color[id].toColor(),crazyText,'!!!'));
      string memory image = Base64.encode(bytes(generateSVGofTokenById(id)));

      return
          string(
              abi.encodePacked(
                'data:application/json;base64,',
                Base64.encode(
                    bytes(
                          abi.encodePacked(
                              '{"name":"',
                              name,
                              '", "description":"',
                              description,
                              '", "external_url":"https://www.fancyloogies.com/bow/',
                              id.toString(),
                              '", "attributes": [{"trait_type": "color", "value": "#',
                              color[id].toColor(),
                              '"},{"trait_type": "crazy", "value": ',
                              crazyValue,
                              '}], "owner":"',
                              (uint160(ownerOf(id))).toHexString(20),
                              '", "image": "',
                              'data:image/svg+xml;base64,',
                              image,
                              '"}'
                          )
                        )
                    )
              )
          );
  }

  function generateSVGofTokenById(uint256 id) internal view returns (string memory) {

    string memory svg = string(abi.encodePacked(
      '<svg width="400" height="400"  xmlns="http://www.w3.org/2000/svg">',
        renderTokenById(id),
      '</svg>'
    ));

    return svg;
  }

  // Visibility is `public` to enable it being called by other contracts for composition.
  function renderTokenById(uint256 id) public view returns (string memory) {
    // bow svg from https://www.svgrepo.com/svg/203940/bow with CCO Licence
    string memory animate = '';
    if (crazy[id]) {
      animate = '<animateTransform attributeName="transform" attributeType="XML" type="rotate" from="0 235 245" to="360 235 245" begin="0s" dur="2s" repeatCount="indefinite" additive="sum" />';
    }
    string memory render = string(abi.encodePacked(
      '<g class="bow" fill="#',color[id].toColor(),'" transform="translate(-65,8) scale(0.4 0.4)">',
          '<path  d="M388.1 433.4c0 1-1.3 4.1-2.8 6.9-2.1 3.7-3.8 5.5-6.8 6.8-2.8 1.3-3.4 1.9-1.9 1.9 1.2 0 3.3-.9 4.8-2.1 3.2-2.5 7.9-11.4 7.3-13.7-.4-1.4-.5-1.4-.6.2zm-95.7 3.1c-.7 1.8.9 6.9 3.6 11.3 2.2 3.6 7.5 7.2 10.5 7.2 1.1-.1.3-.7-2-1.5-4.9-1.7-7.7-4.8-10.1-11.1-1.7-4.5-1.7-4.7.1-6 1.7-1.3 1.7-1.4.2-1.4-1 0-2 .7-2.3 1.5zm55.6 8c-1.8 1.9-3.2 3.6-2.9 3.8.2.2 1.9-1.4 3.8-3.5 4.2-4.8 3.6-5-.9-.3zm22.3 5.2c.9.2 2.3.2 3 0 .6-.3-.1-.5-1.8-.5-1.6 0-2.2.2-1.2.5zm-26.1 3.3c0 1.9.2 2.7.5 1.7.2-.9.2-2.5 0-3.5-.3-.9-.5-.1-.5 1.8zm89.4-.9c-3.6 2.8-5.6 7-5.6 11.8 0 5.3.7 6.9 4.1 8.6 4.9 2.6 10.2 1.9 13.7-1.6 2.9-3 3.1-3 4.1-1.1.6 1.2 1.1 4.2 1.2 6.9.1 7.7 1.8 2.1 1.8-6.2.1-8.5-2.2-14.1-7.1-17.9-4.2-3.2-8.6-3.3-12.2-.5zm8.2 7.1c1.6 1.6 1.5 6.8-.1 6.8-2 0-3.7-2.1-3.7-4.5 0-3.5 1.7-4.4 3.8-2.3zm-116-5.5c.6.2 1.8.2 2.5 0 .6-.3.1-.5-1.3-.5s-1.9.2-1.2.5zm-3.9 2c-1.3 1.6-1.2 1.7.4.4.9-.7 1.7-1.5 1.7-1.7 0-.8-.8-.3-2.1 1.3zm68.4 2c.9.2 2.5.2 3.5 0 .9-.3.1-.5-1.8-.5s-2.7.2-1.7.5zm-83 8c.9.2 2.3.2 3 0 .6-.3-.1-.5-1.8-.5-1.6 0-2.2.2-1.2.5zm73.5 3c1.2.2 3.2.2 4.5 0 1.2-.2.2-.4-2.3-.4s-3.5.2-2.2.4zm-74.3 7.8c-2.5 1.2-2.6 1.4-.5.9 2.8-.7 6-2.3 4.5-2.3-.5 0-2.3.6-4 1.4zm71.3 3.2c.7.3 1.6.2 1.9-.1.4-.3-.2-.6-1.3-.5-1.1 0-1.4.3-.6.6zm40.2 2c-6.2 1.8-10 6.8-10 13.1 0 3.3.6 4.5 3 6.6 4.2 3.4 9.3 4.3 12.6 2.1 2.2-1.4 2.8-1.5 3.5-.4 1.2 1.9 1.1 6.2-.1 9.5-1 2.5-.9 2.6.6 1.3 2.6-2.1 5.4-8.9 5.4-13.2 0-9.4-8.9-20.7-15-19zm4.6 9.7c.7 1.9-1.3 5.6-3 5.6-2.5 0-3.9-2.6-2.6-4.9 1.2-2.4 4.8-2.8 5.6-.7zm-110.7-3.7c-1.3 1.6-1.2 1.7.4.4s2.1-2.1 1.3-2.1c-.2 0-1 .8-1.7 1.7zm48.4 8c.9.2 2.3.2 3 0 .6-.3-.1-.5-1.8-.5-1.6 0-2.2.2-1.2.5zm24.3 5.2c-8.2 5.5-8.6 15.2-.7 20.7 2.6 1.8 10 2.1 13 .4 1.2-.6 2.6-.8 3.2-.4 1.3.8.3 6.6-1.8 10.9l-1.6 3 2.8-2.5c6.9-6.4 8.6-17 4-26-1.5-2.9-3.7-5.6-5.5-6.5-4-2-9.9-1.9-13.4.4zm8.9 9.6c0 2.3-.5 3.1-2.2 3.3-2.6.4-4.1-3.1-2.2-5.4 2-2.4 4.4-1.3 4.4 2.1zm286-139.3c-11.7 4.4-22.3 16.9-24.1 28.4-1.5 9.7 5.6 22.4 15.7 27.9 4.8 2.6 6.5 3 15.9 3.3 8.8.3 11.4 0 16.1-1.7 7.5-2.8 13.2-8 16.6-14.9 2.4-5 2.8-6.9 2.8-14.7 0-8-.3-9.5-2.7-13.6-3.4-5.7-8.8-10.5-14.7-13.2-5.4-2.4-20.8-3.3-25.6-1.5zm20.6 3.9c10.2 2.2 18.4 14 18.2 26.5 0 6.8-4.2 14.5-10.6 19.6-5.7 4.5-8.3 5.3-14 4.4-8.9-1.5-19.5-10.7-21.5-18.9-2.6-10.1 4.7-20.9 15.7-23.2 10-2.1 21.5 7.6 21.3 18.1-.1 8.1-5.4 13.4-13.5 13.4-3.7 0-10.8-4.4-12.6-7.9-1.7-3.1-1.3-6.9.8-8.1 2.8-1.4 3.1-1.3 3.1 1.6 0 1.8-.4 2.5-1.4 2.1-.8-.3-1.7.1-2 .9s-.1 1.4.5 1.4.8.4.4 1c-.3.5.4 1.9 1.7 3.2 1.4 1.4 2.3 1.7 2.6 1 .3-.9.9-.9 2.4-.1 2.9 1.5 8.6.4 11.4-2.2 4.5-4.2 4.4-11.4-.2-16.8-5-5.9-14.6-6.1-21.4-.5-6.3 5.4-7.6 12-3.7 19.3 6.8 13.1 25.6 15 32.8 3.4 2.1-3.3 2.4-5.1 2.4-12.9 0-8.2-.3-9.4-2.8-13.2-4-6.2-9.6-9.5-16.8-10-5.2-.4-6.8 0-12.4 2.7-10.6 5.3-16.5 14.2-16.5 25.3 0 5.9 1.7 10.2 5.8 14.5 1.6 1.8 2.6 3.3 2.2 3.3-.5 0-2.9-2.3-5.4-5.1-4.1-4.5-7.6-12.2-7.6-16.4s3.5-11.9 7.5-16.3c4.9-5.4 11.2-8.7 19.7-10.1 7.5-1.2 8.1-1.2 13.9 0zM691 395c-2 1.3-3.3 1.3-2.5 0 .3-.6 1.4-1 2.3-1 1.5 0 1.5.2.2 1zm6.7 6.7c-.3 1-.5.4-.5-1.2 0-1.7.2-2.4.5-1.8.2.7.2 2.1 0 3zm-3 2.9c-.3.3-1.2.4-1.9.1-.8-.3-.5-.6.6-.6 1.1-.1 1.7.2 1.3.5zm-7.3 2c.3.8.2 1.2-.4.9s-1-1-1-1.6c0-1.4.7-1.1 1.4.7zM157.8 171.8c-2.5 2.6-5.4 6.3-6.3 8.2-1 1.9-2.4 3.9-3 4.5-.7.5-1.6 4.1-1.9 8-.5 4.5-1.6 8.5-3.1 11.2l-2.4 4.3h2.7c4.1.1 10.8 3.5 12.8 6.5 1 1.5 2.8 6.4 4.1 10.8 1.3 4.5 3.3 9.1 4.5 10.2l2 2-.6-2.8c-1.9-8.3-1.8-11.2.8-17l2.6-5.9-3.4-4.1c-6.5-8.1-8.1-12.3-8.1-21.7.1-6.6.6-9.6 2.3-13.4 1.2-2.7 2.1-5.1 1.9-5.2-.2-.2-2.4 1.8-4.9 4.4zm.6 4.7c-3.2 10.4-.5 22.3 7.1 31.2l3.5 4.1-2.5 5c-1.4 2.9-2.5 6.8-2.6 9.3v4.4l-1.8-6c-3.3-11.4-7.1-16-14.3-17.1-3.1-.5-3.8-1-3.2-2.3 2.5-5.9 3.3-9.2 3.4-13.8 0-3.3.5-5.5 1.4-6 .7-.4 2.1-2.4 3.1-4.3 2-3.9 6.6-10.2 7.1-9.7.2.1-.4 2.5-1.2 5.2zm522.6 8.1c-3.1 4.9-5 10.2-5 14 0 3.2 2.8 10.4 5.3 13.8 4 5.4 3.8 5.5-3 2-13-6.5-27.1-8-42.1-4.4-10.8 2.6-12.8 2.5-15.9-.6-2.2-2.3-2.5-3.2-2.1-8 .3-3 .3-5.4.1-5.4s-2.9 5.2-5.9 11.4c-5.7 11.9-9.6 16.6-13.9 16.6-3.8 0-5.5-3.5-5.5-11.3 0-6-.2-6.8-1.5-5.7-3.3 2.8-6.5 11.3-6.5 17.5 0 7.8 4.7 21.6 9.3 27.3.7.8 1 4.9.8 10.1-.3 11.1 1.7 20.1 7.1 30.5 9.8 18.9 28.4 29.6 51.3 29.6 16.6 0 28.3-4.8 38.8-15.9 7.6-8.1 10.8-13.4 14.2-23.4 6.1-18.2 3.5-36.3-7.1-50.7-3.9-5.4-4.4-6.6-4.4-11.4v-5.5l3.3.6c2.8.4 4 0 7-2.7 4.3-3.7 5.5-8.1 3.7-13.7-2.2-6.7-2.8-6.8-7.5-1.9-2.4 2.4-5.4 4.6-6.7 4.9l-2.3.4 2.3.2c1.4 0 3.9-1.5 6.6-3.9 4.8-4.4 4.9-4.4 6.4 1.4.9 2.9.8 4.6-.2 7-2.2 5.3-8.5 8.3-11.4 5.4-1.7-1.7-2.4-.5-3 5.2l-.5 5.1-2.8-2.7c-1.6-1.6-4.8-5.7-7.1-9.2-5.1-7.9-6.1-15.1-2.9-21.7 1.9-3.8 1.9-3.9 1.4-.8-1.1 6.5 3.9 14.4 9.1 14.2 2-.1 2-.1.1-.7-6.9-2.3-9.2-8.7-6.5-18.1 1.4-5.1.5-4.9-3 .5zm-59.3 28c1.5.3 3.1.7 3.6.7.4.1-2 2.2-5.4 4.7-7.8 5.7-16.1 15.5-20.2 24.2-1.8 3.7-3.6 6.6-4.2 6.4-1.7-.4-7.2-12.3-8.4-18.4-1.4-6.2-.3-13.6 2.4-17.6 1.4-2 1.5-1.9 1.5 1.5 0 8.4 3.4 12 9.7 10.4 3.9-.9 10.7-8.4 12.8-13.9l1.8-4.7 1.8 3c1.1 1.8 3 3.3 4.6 3.7zm45.4-.8c14.3 4 28.3 14.8 34.6 26.7 9.5 18 8 40-3.8 58.1-15.1 23.2-44 30.6-70.5 18-28.6-13.6-39.7-51.8-22.6-78.2 4.6-7 15.5-17.5 21.5-20.6 11.7-6 27.8-7.6 40.8-4z"/>',
     '<path d="M650.3 227.5c-10.5 3.2-18 10-23.5 21.3-7.4 15-1.2 33.5 13.8 40.8 4.8 2.3 6.3 2.6 12.7 2.2 13-.9 26.3-10.2 29.7-20.9.8-2.4 2.3-6.4 3.3-8.8 4.1-9.4.4-23.6-7.4-29.2-8.7-6.2-19.6-8.3-28.6-5.4zm22.5 6.8c4.8 3.1 9.9 11.3 10.8 17.3 2.1 14.3-24.3 30.7-37.1 23-4-2.3-7.4-7.4-8.2-11.9-.9-6 .5-10.5 4.8-15.2 5.2-5.6 11-7.9 18.5-7.3 4.9.4 6.2 1 8.6 3.7 4.6 5.1 3.7 12-2.3 17.9-6.6 6.4-14.7 6.7-17.6.7-2-4.3-1.1-7.8 2.9-10.8 4.5-3.4 10.1-.3 8.2 4.7-.7 1.9-5 2.2-5.7.3-.2-.6-.8-.9-1.2-.5-.5.5-.3 1.9.3 3.3 2.8 6 13.2.6 13.2-6.9 0-10.7-16.2-13.1-23.2-3.3-2.6 3.6-3.5 11.6-1.8 15.7 3.5 8.5 13.8 10.7 23.8 5 12.9-7.5 15.9-21.9 6.1-29.2-12.5-9.3-32.3-5-38.8 8.5-4.1 8.5-2 20.9 4.7 28 7 7.4 19.1 9.4 28.2 4.9 2.8-1.5 3.8-1.7 2.5-.6-3.9 3.2-11 5.7-17.5 6.1-6 .4-6.9.2-11.9-2.9-7.7-4.7-11.4-11.5-11.3-20.6.1-10.5 3.4-19.5 9.2-25.3 6.1-6.1 11.6-7.9 22.6-7.6 6.9.2 8.6.6 12.2 3zm-347.2-45c6 13.2 5.5 21.5-2.3 38.2-6 12.6-6.2 16.4-1.3 20.8l3.5 3.1.6-5.9c.7-7.6 4.6-15.4 10.6-21.1l4.5-4.5-.4-8.2c-.6-10.2-3.5-16.5-10.9-23.1-2.8-2.5-5.5-4.6-6-4.6-.4 0 .3 2.4 1.7 5.3zm10.9 8.9c2.4 4.4 3 6.8 3.3 13.9.4 8.1.3 8.7-1.6 9.3-4.6 1.5-14.2 17.7-14.2 24.1l-.1 3-1.9-2.4c-2.6-3.1-2.5-6.4.6-13.6 8.4-19.5 8.7-20.5 8.1-29-.2-4.4-1.2-9.7-2-11.8l-1.6-3.7 3.3 2.5c1.8 1.4 4.6 4.9 6.1 7.7zm251 98.3c1.8 4.1 1.2 6-5 15.9-5.3 8.6-6.3 12.9-4 18.2 2.8 6.8 8.5 11.2 16.5 12.9 4.3.9 7 3.1 7 5.9.1 1.6.6 1.2 2.1-1.7 3.3-6.3 1.4-10.3-8.9-18.9-2.7-2.2-3.2-3.3-3.2-7.1 0-2.4.9-7 2-10.2 3.2-9.3 2.5-12.6-3.7-16.7-3.9-2.5-4.4-2.3-2.8 1.7zm7 5.2c.3 1.5-.4 5.3-2 9.8-3.6 10.6-3.4 14 1.2 17.9 8.9 7.6 10.3 9.3 10.3 13v3.5l-3.2-1.9c-1.8-1-5.3-2.4-7.8-3-8.6-2.3-14-8.3-14-15.8 0-2.9 1.3-5.9 5.2-12.3 4.3-6.9 5.2-9.2 5.3-13.1v-4.7l2.2 2.1c1.2 1.1 2.4 3.1 2.8 4.5zm-197 57.1c-3.3 3.2-7.8 7.2-10 9-2.2 1.9-2.9 2.8-1.6 2.1 2.3-1.1 19.2-16.8 18.1-16.9-.3 0-3.2 2.6-6.5 5.8zm-128.7 20.8c2 2.9 7 7 7.7 6.2.1-.2-2-2.3-4.8-4.8-4.4-3.9-4.8-4.1-2.9-1.4zm93.7.5c-14.1 4.6-27.6 6.2-52.8 6.3-22.4.1-23.9.2-25.3 2-.8 1.1-1.4 3.4-1.3 5l.1 3.1.8-3.3c.4-1.9 1.3-3.9 1.9-4.5.8-.8 8.6-1.2 24.9-1.2 25.2-.1 33.8-1 51.8-6 4.7-1.3 9.1-2.1 9.8-1.9 3.4 1.3 8.2 19.7 7.1 27-.7 5-3.8 8.2-12 12.2-7.6 3.8-14.7 5.8-26 7.6-5 .8-7.4 1.4-5.5 1.5 4.8.1 20.2-3.2 27.1-5.8 12.3-4.7 17.9-10.4 17.9-18.3 0-5.2-2.7-16.6-5.1-21.4-2.4-5.1-3.8-5.4-13.4-2.3z"/>',
         

        '</g>'
      ));

    return render;
  }
}